// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"

  previewFeatures = ["postgresqlExtensions", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

  extensions = [postgis(version: "3.3.2")]
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime

  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?

  accounts          Account[]
  sessions          Session[]
  location          Location?
  pets              Pet[]
  favorites         PetFavorite[]
  changeEmailTokens ChangeEmailToken[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([identifier, token])
}

model RecoveryPasswordToken {
  id       String    @id @default(cuid())
  email    String
  token    String    @unique @default(uuid())
  expireAt DateTime
  usedAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChangeEmailToken {
  id       String    @id @default(cuid())
  newEmail String
  token    String    @unique @default(uuid())
  expireAt DateTime
  usedAt   DateTime?

  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id        String @id @default(cuid())
  latitude  Float
  longitude Float

  userId String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pet {
  id          String    @id @default(cuid())
  name        String
  description String?
  sex         PetSex
  type        PetType
  adoptedAt   DateTime?

  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  images    PetImage[]
  favorites PetFavorite[]
  messages  Chat[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PetImage {
  id   String @id @default(cuid())
  path String

  petId String

  pet Pet @relation(fields: [petId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PetFavorite {
  id String @id @default(cuid())

  userId String
  petId  String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  pet  Pet  @relation(fields: [petId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id String @id @default(cuid())

  petId   String
  user1Id String
  user2Id String

  pet Pet @relation(fields: [petId], references: [id], onDelete: Cascade)

  messages ChatMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatMessage {
  id       String    @id @default(cuid())
  content  String
  viewedAt DateTime?

  senderId String
  chatId   String

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PetSex {
  FEMALE
  MALE
}

enum PetType {
  CAT
  DOG
}
